{
  "rules": {
    "topic": {
      ".read": "auth != null",
      "$topic": {
        ".read": "auth != null",
        ".write": "root.hasChild('superuser/' + auth.uid) && data.val() === null || data.child('owner').val() === auth.uid",
        ".validate": "newData.hasChildren(['owner'])",
        "owner": {
          ".validate": "newData.isString() && (newData.val() === auth.uid || newData.val() === data.val())"
        }
      }
    },
    "question": {
      ".read": "root.hasChild('superuser/' + auth.uid)",
      "$question": {
        ".read": "auth != null",
        ".write": "root.hasChild('superuser/' + auth.uid) && data.val() === null || data.child('owner').val() === auth.uid",
        ".validate": "newData.hasChildren(['owner'])",
        "owner": {
          ".validate": "newData.isString() && (newData.val() === auth.uid || newData.val() === data.val())"
        }
      }
    },
    "quiz": {
      ".read": "true",
      "$quiz": {
        ".read": "auth != null",
        ".write": "root.hasChild('superuser/' + auth.uid) && data.val() === null || data.child('owner').val() === auth.uid",
        ".validate": "newData.hasChildren(['owner'])",
        "owner": {
          ".validate": "newData.isString() && (newData.val() === auth.uid || newData.val() === data.val())"
        }
      }
    },
    "quizresult": {
      ".read": "root.hasChild('superuser/' + auth.uid)",
      "$quizresult": {
        ".read": "auth != null",
        ".write": "root.hasChild('superuser/' + auth.uid) || data.val() === null || data.child('owner').val() === auth.uid",
        ".validate": "newData.hasChildren(['owner'])",
        "owner": {
          ".validate": "newData.isString() && (newData.val() === auth.uid || newData.val() === data.val())"
        }
      }
    },
    "superuser": {
      "$superuser": {
        ".read": "root.hasChild('superuser/' + auth.uid) || $superuser === auth.uid",
        ".write": "data.val() === null || data.child('owner').val() === auth.uid",
        ".validate": "newData.hasChildren(['owner'])",
        "owner": {
          ".validate": "newData.isString() && (newData.val() === auth.uid || newData.val() === data.val())"
        }
      }
    },
    "test": {
      ".read": "root.hasChild('superuser/' + auth.uid)",
      "$test": {
        ".write": "root.hasChild('superuser/' + auth.uid) && (data.val() === null || data.child('owner').val() === auth.uid)",
        ".validate": "newData.hasChildren(['owner'])",
        "owner": {
          ".validate": "newData.isString() && newData.val() === auth.uid"
        }
      }
    }
  }
}
